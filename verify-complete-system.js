// Verificaci√≥n completa del sistema despu√©s de la configuraci√≥n
console.log('üîç VERIFICACI√ìN COMPLETA DEL SISTEMA\n');

const API_BASE = 'http://localhost:8080/api';

async function verifyCompleteSystem() {
  console.log('üìä ESTADO DEL SISTEMA - Asistente Virtual Start');
  console.log('=' .repeat(50));
  
  let allTestsPassed = true;
  const results = {
    backend: false,
    database: false,
    services: false,
    auth: false,
    frontend: false
  };

  // 1. Verificar Backend
  console.log('\n1. üöÄ VERIFICANDO BACKEND...');
  try {
    const healthResponse = await fetch(`${API_BASE}/health`);
    const healthData = await healthResponse.json();
    
    if (healthResponse.ok) {
      console.log('   ‚úÖ Backend funcionando correctamente');
      console.log(`   üìä Estado: ${healthData.status}`);
      console.log(`   üïê Timestamp: ${healthData.timestamp}`);
      results.backend = true;
      
      if (healthData.database && healthData.database.connected) {
        console.log('   ‚úÖ Base de datos Supabase conectada');
        results.database = true;
      } else {
        console.log('   ‚ùå Base de datos no conectada');
        allTestsPassed = false;
      }
    } else {
      console.log('   ‚ùå Error en backend:', healthData);
      allTestsPassed = false;
    }
  } catch (error) {
    console.log('   ‚ùå Backend no accesible:', error.message);
    allTestsPassed = false;
  }

  // 2. Verificar Servicios
  console.log('\n2. üõ†Ô∏è VERIFICANDO SERVICIOS...');
  try {
    const servicesResponse = await fetch(`${API_BASE}/services/available`);
    const servicesData = await servicesResponse.json();
    
    if (servicesResponse.ok && servicesData.services) {
      console.log('   ‚úÖ Servicios disponibles cargados');
      console.log(`   üìã Total servicios: ${servicesData.services.length}`);
      
      if (servicesData.services.length > 0) {
        console.log(`   üõ†Ô∏è  Primer servicio: ${servicesData.services[0].name}`);
        console.log(`   üí∞ Precio: $${servicesData.services[0].price}`);
        results.services = true;
      }
    } else {
      console.log('   ‚ùå Error obteniendo servicios');
      allTestsPassed = false;
    }
  } catch (error) {
    console.log('   ‚ùå Error en servicios:', error.message);
    allTestsPassed = false;
  }

  // 3. Verificar Autenticaci√≥n
  console.log('\n3. üîê VERIFICANDO AUTENTICACI√ìN...');
  try {
    // Probar registro
    const testUser = {
      email: `test_${Date.now()}@example.com`,
      password: 'test123456',
      fullName: 'Usuario Verificaci√≥n Sistema',
      phone: '+1234567890'
    };

    const registerResponse = await fetch(`${API_BASE}/auth/register`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(testUser)
    });

    const registerData = await registerResponse.json();

    if (registerResponse.ok && registerData.user) {
      console.log('   ‚úÖ Registro funcionando');
      console.log(`   üë§ Usuario creado: ${registerData.user.fullName}`);
      console.log(`   üé´ Token recibido: ${registerData.token ? 'S√≠' : 'No'}`);

      // Probar login
      const loginResponse = await fetch(`${API_BASE}/auth/login`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          email: testUser.email,
          password: testUser.password
        })
      });

      const loginData = await loginResponse.json();

      if (loginResponse.ok && loginData.token) {
        console.log('   ‚úÖ Login funcionando');
        console.log('   ‚úÖ JWT tokens operativos');
        results.auth = true;
      } else {
        console.log('   ‚ùå Error en login');
        allTestsPassed = false;
      }
    } else {
      console.log('   ‚ùå Error en registro:', registerData.error || 'Error desconocido');
      allTestsPassed = false;
    }
  } catch (error) {
    console.log('   ‚ùå Error en autenticaci√≥n:', error.message);
    allTestsPassed = false;
  }

  // 4. Verificar Frontend (archivos)
  console.log('\n4. üé® VERIFICANDO FRONTEND...');
  try {
    const fs = await import('fs');
    const path = await import('path');
    
    const frontendFiles = [
      'asistente-virtual-start/package.json',
      'asistente-virtual-start/App.tsx',
      'asistente-virtual-start/services/api.js',
      'asistente-virtual-start/.env.local'
    ];
    
    let frontendOk = true;
    for (const file of frontendFiles) {
      if (fs.existsSync(file)) {
        console.log(`   ‚úÖ ${file.split('/').pop()}`);
      } else {
        console.log(`   ‚ùå ${file} no encontrado`);
        frontendOk = false;
      }
    }
    
    if (frontendOk) {
      console.log('   ‚úÖ Archivos del frontend completos');
      results.frontend = true;
    } else {
      allTestsPassed = false;
    }
  } catch (error) {
    console.log('   ‚ùå Error verificando frontend:', error.message);
    allTestsPassed = false;
  }

  // 5. Resumen Final
  console.log('\n' + '='.repeat(50));
  console.log('üìä RESUMEN DE VERIFICACI√ìN');
  console.log('='.repeat(50));
  
  console.log(`üöÄ Backend API:        ${results.backend ? '‚úÖ FUNCIONANDO' : '‚ùå ERROR'}`);
  console.log(`üóÑÔ∏è  Base de Datos:      ${results.database ? '‚úÖ CONECTADA' : '‚ùå ERROR'}`);
  console.log(`üõ†Ô∏è  Servicios:          ${results.services ? '‚úÖ OPERATIVOS' : '‚ùå ERROR'}`);
  console.log(`üîê Autenticaci√≥n:      ${results.auth ? '‚úÖ FUNCIONANDO' : '‚ùå ERROR'}`);
  console.log(`üé® Frontend:           ${results.frontend ? '‚úÖ CONFIGURADO' : '‚ùå ERROR'}`);
  
  console.log('\n' + '='.repeat(50));
  
  if (allTestsPassed) {
    console.log('üéâ ¬°SISTEMA COMPLETAMENTE FUNCIONAL!');
    console.log('\nüìù PR√ìXIMOS PASOS:');
    console.log('   1. Iniciar backend: cd backend-api && npm start');
    console.log('   2. Iniciar frontend: cd asistente-virtual-start && npm run dev');
    console.log('   3. Abrir navegador: http://localhost:5173');
    console.log('   4. Probar con credenciales: admin@asistentevirtual.com / admin123');
    console.log('\nüöÄ ¬°LISTO PARA DEPLOY A PRODUCCI√ìN!');
  } else {
    console.log('‚ùå SISTEMA CON ERRORES - REVISAR CONFIGURACI√ìN');
    console.log('\nüîß ACCIONES REQUERIDAS:');
    if (!results.backend) console.log('   ‚Ä¢ Verificar configuraci√≥n del backend');
    if (!results.database) console.log('   ‚Ä¢ Verificar conexi√≥n a Supabase');
    if (!results.services) console.log('   ‚Ä¢ Ejecutar setup de base de datos');
    if (!results.auth) console.log('   ‚Ä¢ Verificar configuraci√≥n JWT');
    if (!results.frontend) console.log('   ‚Ä¢ Verificar archivos del frontend');
  }
  
  console.log('\nüìû COMANDOS DE DIAGN√ìSTICO:');
  console.log('   ‚Ä¢ node test-supabase-connection.js');
  console.log('   ‚Ä¢ cd backend-api && npm run setup-supabase');
  console.log('   ‚Ä¢ curl http://localhost:8080/api/health');
  
  return allTestsPassed;
}

// Ejecutar verificaci√≥n
verifyCompleteSystem().catch(error => {
  console.error('‚ùå Error en verificaci√≥n del sistema:', error);
});